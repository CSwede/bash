# Right click inside terminal to find preferences (change cursors to I-beam)

# pwd = "print working directory"

# grep <SearchWord> <filename>
  # Will search through the file <filename> for the word <SearchWord>. And everytime it finds the <SearchWord> it will display
  that line in the terminal.

# diff <file1> <file2> will show you the difference between the two files.
  # Will print out the lines that are different between the two files.
  
# passwd to change your password

# ls -l...Just know that -l = option and for eg: cat < <file1>, then <file1> = argument.

# ls > <file1> to copy whatever output the command gives you to the file <file1>
  # Will create <file1> in your current working directory.
  # if you then afterwards run pwd > <file1> it will override the output from ls > so now <file1> only contains output from
  pwd > <file1>
  # if you don't want it to be overwritten you can use:
  pwd >> <file1>
  now <file1> will contain the output from both ls and pwd.

# File permissions is one of the most important concepts in Linux
  # u = user, main owner of the file
  # g = group, that owner belongs too
  # o = others (from the outside world)

# chmod o+w <file1>
  # changes the permission for the group Others so that they can write the <file>.

# chmod o-w <file1> 
  # takes the write permission away from group Others
  
# chmod 754 <file>
  # 7, 5, 4 represents the individual permissions for (in this order) user, group, other
  # 1 = execute
  # 2 = write
  # 4 = read permission. Others can now read <file>
  # 0 = No permissions
  # 7 = (4+2+1) --> Got all permissions
  # chmod 777 <file> gives all groups all permissions 

# Hashing Algorithm
# shalsum <filename> | grep <hash from website>
  # To run a hashing algo on a file to make sure/confirm that you have downloaded the correct file. 
  # "red is a good thing - that's what you want to see"

# grep means that you can pattern match

# gzip <file> to compress <file> in its current location/directory.
  # Note that this is not a copy function so you will only have 1 version of <file> and that will be the compressed file
  # After using gzip the file will now have the .gz extension

# gunzip <file.gz> to decompress it ("unzip", "extract") the <file.gz> in its current location/directory.

# tar file is equivalent of a zip file in Windows

# tar cvf <name_of_tar_file.tar> <file1> <file2>
  # This will compress <file1> and <file2> into a tar file called <name_of_tar_file.tar>
  # it will also print <file1> and <file2> to the terminal
  # cvf -> c=create mode, v=display the output in the terminal, f=file option)
  
# tar xvf <name_of_tar_file.tar> to decompress/extract the files within the tar file

# apt = advanced package tool

# sudo = super user do

# java -version
  # Will display what version of Java you have installed
  # If Java not installed it will tell you, so good way to see if the program in question is already installed.

# .sh extension means that its a Shell Script
  # meaning that it is a program that you can run from your terminal

# bash <file.sh> to run a Shell Script.

# sudo useradd <mom>
  # to add a new user called mom
  # when you create user <mom> she will automatically be included in a group also called <mom>
  # sudo passwd <mom>     To change the password for user <mom>

# sudo groupadd <nurses>
  # to add a new group called nurses
  # sudo usermod -a -G <nurses> <mom>   To add user <mom> to the group <nurses>
  # whenever you see a capital G (as in -G) = we're just going to add them to a group
  if you see it with a lowercase g (as in -g) = we're changing their primary group (eg group <mom> for user <mom> in this eg)
  if you use -g you would remove user <mom> from the group <mom> and add her to group <nurses> (now her only group)
  if you use -G the user <mom> would still be in group <mom> and she would be added to group <nurses>

# sudo userdel <mom>
  # to delete user <mom>

# cd ../..    To go up into your parent directory twice (not just once like with cd ..)

# See tutorial 13 - Group and More after the 5 min mark for some cool stuff about how it works behind the scenes in the / directory etc.

# Linux always encrpts passwords so that they are never written in clear text
  # sudo cat shadow (watch the tutorial 13 from above)
  
# DigitalOcean for renting a server online (SSH server). Click the link in Tutorial 14 - Setup and Connect to SSH Server
  # GREAT tutorial on how to set up the server there too.

# ssh <root@45.55.248.198>
  # To connect to the computer 45.55.248.198 as the user root
  # can use commands like ls, pwd, cd etc. just the same on the ssh server since in this example it was setup with Ubuntu as well.

# SSH keys: Private vs Public Key (Tutoral 15)

# ssh-keygen -t rsa
  # to generate public/private rsa key pair
  # ssh-copy-id root@45.55248.198     To add one key...Need to watch the Tutorial while doing this.

# nano </etc/ssh/ssdh_config>
  # nano allows you to edit multiple lines at the time
  
# ALL tutorials on servers are great. Need to watch them as you're doing the work.  
  
# put -r Desktop/Books    (This is done will being connected to the server from your terminal)
  # we're going to add the directory Desktop/Books into the server
  # the -r option means we're doing it "recursively" --> meaning that we will also move all the files that are in the directory
  to our server
  
# get <index.html> Desktop/index.html
  # to download the file <index.html> from your server to Desktop directory with name <index.html>

# sudo apt-get install gparted
  # to install gparted that allows you do create partitions. Great GUI for creating partitions
  # sudo gparted in terminal to run gparted
  # /dev/sda and /dev/sdb in the top right corner (you only have /dev/sda on your Mac). This is for Devices
    # Any new device that you plug in would be included here. So in his example if he plugged in a USB Stick it would be /dev/sdc 
  # Partitions are called /dev/sda1, /dev/sda2, /dev/sda3 etc. They are all a part of the /dev/sda harddrive. 
    # gparted is great because it gives you more info about each harddrive and/or partition such as File System, Mount Point etc.

# File Systems - ext3 and ext4 are the more modern ones and are used more in Linux these days
  # ext3 is currently standard for Linux
  # ext4 is better to use when you partition new systems though (as explained in the tutorial)
  # fat32 when you want to use something for both Linux and Windows

# Tutorial 19 - Watch it as you are creating new partitions on your systems. 
  # Do a test run on a USB drive

# When you create 2 partitions on 1 USB drive the system will look at it as/see it as 2 separate devices

# you can use any text editor when you create Shell Scripts. It's all the same for this purpose.

#!/bin/sh   
  # To create shell script
  # doesn't even appear that you need the .sh extension as long as you have the #!/bin/sh
  # run it with bash <scriptname> from the terminal

# chmod +rx <file>
  # to change the permission on <file> for the owner to read & execute

# a process is essentially just any program that is running on your computer

# ps 
  # command in your terminal will give you the processes that is associated with your terminal session
  # PID = Process ID. Every time a process is started it is assigned a new unique PID
  # TTY = The terminal that the process is running from
  # TIME = The amount of CPU time that the process took up

# ps ax
  # gives you all the processes that are going on, including background processes

# even small commands like ls or cd are processes/programs

# xlogo &
  # at the command line - this means run the program xlogo in the background
  # the program is still running but it doesn't "take over" the terminal, so you can still enter new commands in the terminal
  even though the program is running
  # output from xlogo & in his example:
  [1] 2710
    # 2710 = PID
    # [1] = jobs number
    
 # jobs
  # lists all the jobs that are currently running

# fg %[jobs number]
  # its without the [] in the terminal
  # it lets [jobs number] "take over" the terminal again - so you can close out the job with Ctrl+C for example. 
  # example of how it would flow:
  xlogo &       --> The program xlogo would now start running in the background
  
  jobs
  [1]+  Running         xlogo &         --> this would be the output from the command jobs
  
  fg %1         --> this would give you control over xlogo from the terminal window again, ^C (Ctrl+C) would kill the program/job
  ^C

# ^Z (Ctrl+Z)
  # stops/freezes program/process/job
  # you can't "x out of the program" from its GUI now
  # fg %[jobs number] brings it back to the foreground again
    # Note that when you bring it back to the foreground again, all the clicks that you did while it was frozen will be executed
    so if you clicked "x" in the GUI to quit the program while it was frozen, it will now quit as you bring it back to the foreground

# kill -STOP [PID]
  # its without the [] in the terminal
  # this is the same as stop/freezing the process/program but using the PID instead of the jobs number
  # kill -CONT [PID]
    # to start the program/process again
    # once again, without the [] in the terminal

# ^C is essentially the same as kill
  # You can only send kill signals to processes you own
  # if you want to kill system processes you need to send kill signals as root/sudo 
  
  
  
  
  
  
  
  
  
  
